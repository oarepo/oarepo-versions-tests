name: Get requirements from repo

on:
  workflow_call:
    inputs:
      repo-name:
        description: Repository name (oarepo/oarepo-vocabularies)
        required: true
        default: oarepo/oarepo-vocabularies
        type: string
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        type: string
        default: 11
    outputs:
      requirements:
        description: Requirements subset
        value: ${{ jobs.runjob.outputs.requirements }}

jobs:
  runjob:
    runs-on: ubuntu-latest
    env:
      OAREPO_VERSION: ${{ github.event.inputs.oarepo }}
      PYTHON_VERSION: 3.10
      FILE: reqirements.txt
      TOK: ${{ secrets.OAREPO_BOT }}
    outputs:
      requirements: ${{ steps.step1.outputs.requirements }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: get requirements for ${{ github.event.inputs.repo-name }}
        id: step1
        run: |
          REPO="${{ github.event.inputs.repo-name }}"
          BASE_URL="https://api.github.com/repos/$REPO"
          BR="main"
          FILE="requirements.txt"
          . ./scripts/functions.sh
          mkdir -p tmp
          echo "REPO=$REPO:  (BASE_URL=$BASE_URL)"
          # download list of actions runs, filter it and grab url:
          RUN_URL=$(api_get "$BASE_URL/actions/runs" | tee tmp/runs.json | jq -r '
            [
              .workflow_runs[]
              | select(.conclusion=="success" and (.event=="push" or .event=="workflow_dispatch") and .head_branch=="'$BR'")
            ][0]
            |.url
          ')
          echo -e "$?\nRUN_URL=$RUN_URL"
          # download artifact list and find section with the wanted file:
          ARTIFACT_JSON=$(api_get "$RUN_URL/artifacts" | tee tmp/artifacts.json | jq -r '.artifacts[]|select(.name=="'$FILE'")')
          echo -e "$?\nARTIFACT_JSON=$ARTIFACT_JSON"
          # grab download url:
          DOWNLOAD_URL=$(jq -r '.archive_download_url' <<<$(echo $ARTIFACT_JSON))
          echo "DOWNLOAD_URL=$DOWNLOAD_URL"
          # get real url:
          LOC=$(api_get "$DOWNLOAD_URL" -i -w '%{redirect_url}' -o /dev/null)
          echo -e "$?\nLOC=>$LOC<"
          # download, unzip and filter the file
          REQUIREMENTS=$(curl -s -XGET "$LOC" | zcat | sed -n '/^oarepo/p; /^nr/p;')
          echo -e "$?\nselection from $FILE:\n$REQUIREMENTS"
          # save selected requirements to env
          echo -e "\njson:"
          { echo -n "requirements="; jq -c -n '$ARGS.positional' --args "${REQUIREMENTS}"; } | tee -a $GITHUB_OUTPUT
