name: Test

on:
  workflow_call:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 11
        type: string
  workflow_dispatch:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 11

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #python-version: [ "3.9", "3.10" ]
        python-version: [ "3.10" ]
        oarepo-library: [ "oarepo/oarepo-runtime", "oarepo/oarepo-vocabularies" ]
    env:
      OAREPO_VERSION: ${{ github.event.inputs.oarepo }}
      TOK: ${{ secrets.OAREPO_BOT }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: get requirements for ${{ matrix.oarepo-library }}
        run: |
          REPO="${{ matrix.oarepo-library }}"
          BASE_URL="https://api.github.com/repos/$REPO"
          BR="main"
          FILE="requirements.txt"
          . ./scripts/functions.sh
          echo "REPO=$REPO:  (BASE_URL=$BASE_URL)"
          RUN_URL=$(api_get "$BASE_URL/actions/runs" | jq -r '[.workflow_runs[]|select(.conclusion=="success" and .event=="push" and .head_branch=="main")][0]|.url')
          echo -e "$?\nRUN_URL=$RUN_URL"
          ARTIFACT_JSON=$(api_get "$RUN_URL/artifacts" | jq -r '.artifacts[]|select(.name=="'$FILE'")')
          echo -e "$?\nARTIFACT_JSON=$ARTIFACT_JSON"
          DOWNLOAD_URL=$(jq -r '.archive_download_url' <<<$(echo $ARTIFACT_JSON))
          echo "DOWNLOAD_URL=$DOWNLOAD_URL"
          LOC=$(api_get "$DOWNLOAD_URL" -i -w '%{redirect_url}' -o /dev/null)
          echo -e "$?\nLOC=>$LOC<"
          REQUIREMENTS=$(curl -s -XGET "$LOC" | zcat | sed -n '/^oarepo/p; /^nr/p;')
          echo -e "$?\nselection from $FILE:\n$REQUIREMENTS"
          echo -e "REQUIREMENTS<<EOF\n$REQUIREMENTS\nEOF" >> $GITHUB_ENV

      - name: get latest versions
        run: |
          REPO="${{ matrix.oarepo-library }}"
          BASE_URL="https://api.github.com/repos/$REPO"
          BR="main"
          echo -e "REQUIREMENTS:\n$REQUIREMENTS"
          . ./scripts/functions.sh
          REGEX="^([-a-z0-9]+)[<>=]+(([0-9]+)\..*)$"
          REBUID_NEEDED=
          for REQ in $REQUIREMENTS; do
            if [[ "$REQ" =~ $REGEX ]]; then
              PKG="${BASH_REMATCH[1]}"
              USED="${BASH_REMATCH[2]}"
              MAJOR="${BASH_REMATCH[3]}"
              echo "package $REQ ... $PKG $MAJOR"
              LATEST=$(get_latest_pypi_version "$PKG" "$MAJOR")
              # version test by status from silent version sort
              if printf "%s\n" "$LATEST" "$USED" | sort -CV ; then
                echo "OK"
              else
                echo "newer on PyPI (latest:$LATEST, used:$USED) => rebuild needed"
                REBUID_NEEDED=1
              fi
            else
              echo "Unsupported format ($REQ)"
            fi
            if [[ $REBUID_NEEDED ]]; then
              echo "rebuid $REPO!"
              api_trig "$REPO" "manual.yml"
            fi
          done

#      - name: Download artifacts
#        uses: actions/Download-artifact@v3
#        with:
#          name: dist
#          path: dist

#      - name: Archive production artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: requirements.txt
#          path: requirements.txt
