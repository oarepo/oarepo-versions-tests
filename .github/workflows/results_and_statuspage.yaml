name: Check results and make statuspage

on:
  workflow_call:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 11
        type: string
  workflow_dispatch:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 11

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write    

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  load-matrix-job:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set matrix
        id: load-matrix
        run: echo "matrix=$(jq -c --raw-input --slurp 'split("\n")|map(select(.!=""))' < ./libraries.txt)" >> $GITHUB_OUTPUT
      - name: Debug
        run: |
          echo "matrix: >${{ steps.load-matrix.outputs.matrix }}<"
          echo "json:"
          jq '.' <<<'${{ steps.load-matrix.outputs.matrix }}'

  process-matrix-job:
    runs-on: ubuntu-latest
    needs: load-matrix-job
    strategy:
      matrix:
        oarepo-library: ${{ fromJson(needs.load-matrix-job.outputs.matrix) }}
        python-version: [ "3.10" ]
    env:
      OAREPO_VERSION: ${{ github.event.inputs.oarepo }}
      TOK: ${{ secrets.OAREPO_BOT }}
      BOT: oarepo-bot
      TMP_DIR: /tmp/results_and_statuspage_data
      REPO: ${{ matrix.oarepo-library }}
      BASE_URL: https://api.github.com/repos/${{ matrix.oarepo-library }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get default branch for ${{ matrix.oarepo-library }}
        run: |
          . ./scripts/functions.sh
          echo -e "\n$REPO\n($BASE_URL)\nget default branch:"
          BR=$(api_call "$BASE_URL" | jq -r '.default_branch')
          echo " ... branch $BR"
          echo "BR=$BR" >> $GITHUB_ENV
      - name: Get trigrun data for ${{ matrix.oarepo-library }}
        run: |
          . ./scripts/functions.sh
          echo "api_get_trigrun (for $REPO):"
          read RUNDATE RUNCONCLUSION RREF RWF RUNURL <<<$(api_get_trigrun "$BASE_URL")
          sleep 1
          read SUCCDATE SUCCCONCLUSION SREF SWF SUCCURL <<<$(api_get_trigrun "$BASE_URL" success)
          echo "RUNCONCLUSION=$RUNCONCLUSION RUNDATE=$RUNDATE SUCCDATE=$SUCCDATE SREF=$SREF RWF=$RWF"
          if [[ "$RUNCONCLUSION" != "success" && -n "$SUCCDATE" ]]; then
            # last run failed and there is at least one succ.run
            S_AGE=$(( $(date '+%s') - $(date '+%s' -d "$(echo $SUCCDATE)") ))
            if [[ $S_AGE -lt 86400 ]]; then
              # succ.run less then 1 day old
              echo "notification trigger ?"
            fi
          fi
          # try to extract tag-name
          if [[ "$SREF" =~ ^refs/tags/([0-9.]+([a-z]*))$ ]]; then
            TAG=${BASH_REMATCH[1]}
          else
            TAG=""
          fi
          mkdir -p $TMP_DIR
          ARTIF_NAME="rs_${REPO//\//_}"
          OUTFILE="$TMP_DIR/$ARTIF_NAME.txt"
          echo -e "$REPO\t$RUNCONCLUSION\t$RUNDATE\t$SUCCDATE\t$RWF\t$TAG" > "$OUTFILE"
          echo -e "OUTFILE=$OUTFILE\nARTIF_NAME=$ARTIF_NAME" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIF_NAME }}
          path: ${{ env.OUTFILE }}
          retention-days: 1

  process-outputs:
    runs-on: ubuntu-latest
    needs: process-matrix-job
    env:
      TMP_DIR: /tmp/results_and_statuspage_data
      MM_OAREPO_WH: ${{ secrets.MM_OAREPO_WH }}
    outputs:
      notif-msg: ${{ steps.generate-index.outputs.notif-msg }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Debug
        run: |
          OAR_LIBS=$(cat ./libraries.txt)
          echo ">$OAR_LIBS<"
          echo -e "OAR_LIBS<<EOF\n$OAR_LIBS\nEOF" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.TMP_DIR }}

      - name: Generate index page
        id: generate-index
        run: |
          . ./scripts/functions.sh
          ls -l $TMP_DIR
          SUCC=0 FAIL=0
          declare -a FAILS
          for REPO in $(echo $OAR_LIBS); do
            ARTIF_NAME="rs_${REPO//\//_}"
            FILE="$TMP_DIR/$ARTIF_NAME/$ARTIF_NAME.txt"
            cat "$FILE"
            read REPO2 STATUS RUNDATE SUCCDATE RWF TAG < "$FILE"
            TAGLBL="${TAG:+tag }$TAG"
            REPO_URL="https://github.com/$REPO"
            BADGE_URL="$REPO_URL/actions/workflows/${RWF//.github\/workflows\//}/badge.svg"
            echo "REPO=$REPO STATUS=$STATUS RWF=$RWF TAG=$TAG"
            echo "BADGE_URL=$BADGE_URL"
            {
              echo "* ![$REPO - $STATUS]($BADGE_URL)\\"
              echo "[$REPO]($REPO_URL)\\"
              echo "$STATUS: $(TZ='Europe/Prague' date '+%Y-%m-%d %H:%M:%S %Z' -d "$RUNDATE")"
              if [[ "$STATUS" == "success" ]]; then
                echo " $TAGLBL"
                ((++SUCC))
              else
                echo "\\"
                echo "last success: $(TZ='Europe/Prague' date '+%Y-%m-%d %H:%M:%S %Z' -d "$SUCCDATE") $TAGLBL"
                ((++FAIL))
                FAILS+=( "* [$REPO]($REPO_URL)" )
              fi
              echo ""
            } >> ./pages/index.md
          done
          STAT="<span style=\"color:green\">success:$SUCC</span>"
          NOTIF_MSG=""
          if [[ $FAIL -gt 0 ]]; then
            STAT+=" / <span style=\"color:red\">failure:$FAIL</span>"
            NOTIF_MSG="[oarepo-versions-tests](https://oarepo.github.io/oarepo-versions-tests/)\nfailed builds:\n$(IFS=$'\n' ; echo "${FAILS[*]}")"
            echo "NOTIF_MSG=$NOTIF_MSG"
          fi
          sed -i "s/#STAT/${STAT//\//\\\/}/" ./pages/index.md
          {
            echo "---"
            echo "Generated: $(TZ='Europe/Prague' date '+%Y-%m-%d %H:%M:%S %Z')"
          } >> ./pages/index.md
          echo -e "notif-msg<<EOF\n$NOTIF_MSG\nEOF" >> $GITHUB_OUTPUT

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./pages
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: process-outputs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  send-notification:
    runs-on: ubuntu-latest
    needs: [ process-outputs, deploy-pages ]
    #if: needs.process-outputs.outputs.notif-msg != ''
    # DISABLED
    if: false
    env:
      NOTIF_MSG: ${{ needs.process-outputs.outputs.notif-msg }}
      MM_OAREPO_WH: ${{ secrets.MM_OAREPO_WH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Send notification
        run: |
          . ./scripts/functions.sh
          echo "NOTIF_MSG=$NOTIF_MSG"
          mm_msg "$NOTIF_MSG" ${{ secrets.MM_CHANNEL }}
