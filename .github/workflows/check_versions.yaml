name: Get requirements and check versions

on:
  workflow_call:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 12
        type: string
  workflow_dispatch:
    inputs:
      oarepo:
        description: OARepo version (11, 12, ...)
        required: true
        default: 12

jobs:
  load-matrix-job:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set matrix
        id: load-matrix
        run: echo "matrix=$(jq -c --raw-input --slurp 'split("\n")|map(select(.!=""))' < ./libraries.txt)" >> $GITHUB_OUTPUT
      - name: Debug
        run: |
          echo "matrix: >${{ steps.load-matrix.outputs.matrix }}<"
          echo "json:"
          jq '.' <<<'${{ steps.load-matrix.outputs.matrix }}'

  ver-check:
    runs-on: ubuntu-latest
    needs: load-matrix-job
    strategy:
      matrix:
        oarepo-library: ${{ fromJson(needs.load-matrix-job.outputs.matrix) }}
        python-version: [ "3.10" ]
    env:
      OAREPO_VERSION: ${{ github.event.inputs.oarepo }}
      TOK: ${{ secrets.OAREPO_BOT }}
      TMP_DIR: /tmp/check_versions_data
      REPO: ${{ matrix.oarepo-library }}
      BASE_URL: https://api.github.com/repos/${{ matrix.oarepo-library }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get default branch for ${{ matrix.oarepo-library }}
        run: |
          . ./scripts/functions.sh
          echo -e "\n$REPO\n($BASE_URL)\nget default branch:"
          BR=$(api_call "$BASE_URL" | jq -r '.default_branch')
          echo " ... branch $BR"
          echo "BR=$BR" >> $GITHUB_ENV

      - name: Get requirements for ${{ matrix.oarepo-library }}
        run: |
          REQFILE="requirements.txt"
          . ./scripts/functions.sh
          mkdir -p $TMP_DIR
          echo "REPO=$REPO:  (BASE_URL=$BASE_URL)"
          # download list of actions runs, filter it and grab url:
          read SUCCDATE SUCCCONCLUSION SREF SWF RUN_URL <<<$(api_get_trigrun "$BASE_URL" success)
          echo -e "$?\nRUN_URL=$RUN_URL"
          # download artifact list and find section with the wanted file:
          ARTIFACT_JSON=$(api_get "$RUN_URL/artifacts" | jq -r '.artifacts[]|select(.name=="'$REQFILE'")')
          echo -e "$?\nARTIFACT_JSON=$ARTIFACT_JSON"
          # grab download url:
          DOWNLOAD_URL=$(jq -r '.archive_download_url' <<<$(echo $ARTIFACT_JSON))
          echo "DOWNLOAD_URL=$DOWNLOAD_URL"
          # get real url:
          LOC=$(api_get "$DOWNLOAD_URL" -i -w '%{redirect_url}' -o /dev/null)
          echo -e "$?\nLOC=>$LOC<"
          # download, unzip and filter the file
          REQUIREMENTS=$(curl -s -XGET "$LOC" | zcat | sed -n '/^oarepo/p; /^nr/p;')
          echo -e "$?\nselection from $REQFILE:\n$REQUIREMENTS"
          # save selected requirements and branch to env
          echo -e "REQUIREMENTS<<EOF\n$REQUIREMENTS\nEOF" >> $GITHUB_ENV
          OUTFILE="$TMP_DIR/${REPO//\//_}.txt"
          echo -e "OUTFILE=$OUTFILE\nARTIF_NAME=${REPO//\//_}" >> $GITHUB_ENV

      - name: Get latest versions, check and trig. rebuild if needed
        run: |
          echo -e "branch: $BR\n"
          echo -e "REQUIREMENTS:\n$REQUIREMENTS\n"
          . ./scripts/functions.sh
          REGEX="^([-a-z0-9]+)[<>=]+(([0-9]+)\..*)$"
          {
          REBUID_NEEDED=
          for REQ in $REQUIREMENTS; do
            if [[ "$REQ" =~ $REGEX ]]; then
              PKG="${BASH_REMATCH[1]}"
              USED="${BASH_REMATCH[2]}"
              MAJOR="${BASH_REMATCH[3]}"
              echo -n "package $REQ ($PKG $MAJOR) ... "
              # get latest version from PyPI
              LATEST=$(get_latest_pypi_version "$PKG" "$MAJOR")
              echo -n "latest:$LATEST, used:$USED ... "
              # version test by status from silent version sort
              if printf "%s\n" "$LATEST" "$USED" | sort -CV ; then
                echo "OK"
              else
                echo "newer on PyPI => rebuild needed"
                REBUID_NEEDED=1
              fi
            else
              echo "Unsupported format ($REQ)"
            fi
          done
          if [[ $REBUID_NEEDED ]]; then
            echo -e "\n-->calling rebuid $REPO (manual.yaml)":
            api_trig "$BASE_URL" "manual.yaml"
            echo "return status: $?"
          else
            echo -e "\n-->rebuild not necessary"
          fi
          } | tee -a $OUTFILE

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIF_NAME }}
          path: ${{ env.OUTFILE }}
          retention-days: 1

  debug-job:
    runs-on: ubuntu-latest
    needs: ver-check
    env:
      TMP_DIR: /tmp/check_versions_data
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.TMP_DIR }}

      - name: Debug
        run: |
          ls -l $TMP_DIR
          for OLIB in $(cat ./libraries.txt); do
            echo "=== $OLIB ==="
            cat "$TMP_DIR/${OLIB//\//_}/${OLIB//\//_}.txt"
            echo -e "=== ^^^ ===\n\n"
          done
